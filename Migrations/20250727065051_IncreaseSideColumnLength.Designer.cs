// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using crypto_bot_api.Data;

#nullable disable

namespace crypto_bot_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250727065051_IncreaseSideColumnLength")]
    partial class IncreaseSideColumnLength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("crypto_bot_api.Data.ClosingTrades", b =>
                {
                    b.Property<string>("trade_id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("asset_pair")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("commission")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("offloaded_price")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("offloaded_quantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("opening_trade_id")
                        .IsRequired()
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("position_uuid")
                        .HasColumnType("uuid");

                    b.Property<string>("side")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("trade_time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("trade_id");

                    b.HasIndex("opening_trade_id");

                    b.HasIndex("position_uuid");

                    b.ToTable("Closing_Trades", "public");
                });

            modelBuilder.Entity("crypto_bot_api.Data.OpeningTrades", b =>
                {
                    b.Property<string>("trade_id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("acquired_price")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("acquired_quantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("asset_pair")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("commission")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<Guid>("position_uuid")
                        .HasColumnType("uuid");

                    b.Property<string>("side")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("trade_time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("trade_id");

                    b.HasIndex("position_uuid");

                    b.ToTable("Opening_Trades", "public");
                });

            modelBuilder.Entity("crypto_bot_api.Data.TradeRecords", b =>
                {
                    b.Property<Guid>("position_uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("acquired_price")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("acquired_quantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("asset_pair")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("is_position_closed")
                        .HasColumnType("boolean");

                    b.Property<decimal>("leftover_quantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("percentage_return")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("position_type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("profit_loss")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<DateTime>("record_opened_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("total_commissions")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.HasKey("position_uuid");

                    b.HasIndex("asset_pair", "is_position_closed", "leftover_quantity")
                        .HasDatabaseName("IX_Trade_Records_asset_pair_is_position_closed_leftover_quantity")
                        .HasFilter("leftover_quantity > 0");

                    b.ToTable("Trade_Records", "public");
                });

            modelBuilder.Entity("crypto_bot_api.Models.ProductInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AuctionMode")
                        .HasColumnType("boolean");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("BaseIncrement")
                        .HasColumnType("numeric");

                    b.Property<bool>("CancelOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("FxStablecoin")
                        .HasColumnType("boolean");

                    b.Property<string>("HighBidLimitPercentage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LimitOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("MarginEnabled")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MaxSlippagePercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinMarketFunds")
                        .HasColumnType("numeric");

                    b.Property<bool>("PostOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuoteCurrency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("QuoteIncrement")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TradingDisabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductInfo");
                });

            modelBuilder.Entity("crypto_bot_api.Data.ClosingTrades", b =>
                {
                    b.HasOne("crypto_bot_api.Data.OpeningTrades", null)
                        .WithMany()
                        .HasForeignKey("opening_trade_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Closing_Trades_Opening_Trades_opening_trade_id");

                    b.HasOne("crypto_bot_api.Data.TradeRecords", null)
                        .WithMany()
                        .HasForeignKey("position_uuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Closing_Trades_Trade_Records_position_uuid");
                });

            modelBuilder.Entity("crypto_bot_api.Data.OpeningTrades", b =>
                {
                    b.HasOne("crypto_bot_api.Data.TradeRecords", null)
                        .WithMany()
                        .HasForeignKey("position_uuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Opening_Trades_Trade_Records_position_uuid");
                });
#pragma warning restore 612, 618
        }
    }
}
